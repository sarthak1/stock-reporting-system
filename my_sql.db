-- Table: Stock_Master
CREATE TABLE Stock_Master (
    StockID INT AUTO_INCREMENT PRIMARY KEY,
    StockName VARCHAR(255) NOT NULL UNIQUE, -- Ensures unique stock names if applicable.
    Category VARCHAR(100) NOT NULL,
    UnitOfMeasure VARCHAR(50) NOT NULL,
    InitialStock INT NOT NULL CHECK (InitialStock >= 0) -- Ensure non-negative initial stock.
);

-- Table: Stock_Transactions
CREATE TABLE Stock_Transactions (
    TransactionID INT AUTO_INCREMENT PRIMARY KEY,
    StockID INT NOT NULL,
    TransactionDate DATE NOT NULL,
    TransactionType CHAR(1) CHECK (TransactionType IN ('I', 'O')), -- Use CHAR(1) instead of ENUM for simplicity ('I' for Inbound, 'O' for Outbound).
    Quantity INT NOT NULL CHECK (Quantity > 0), -- Enforce positive transaction quantities.
    Remarks TEXT,
    FOREIGN KEY (StockID) REFERENCES Stock_Master(StockID) ON DELETE CASCADE -- Cascade deletes to maintain referential integrity.
);

-- Table: Daily_Stock_Summary
CREATE TABLE Daily_Stock_Summary (
    SummaryID INT AUTO_INCREMENT PRIMARY KEY,
    StockID INT NOT NULL,
    Date DATE NOT NULL,
    OpeningQuantity INT NOT NULL CHECK (OpeningQuantity >= 0), -- Enforce non-negative opening quantity.
    InboundQuantity INT NOT NULL CHECK (InboundQuantity >= 0), -- Enforce non-negative inbound quantity.
    OutboundQuantity INT NOT NULL CHECK (OutboundQuantity >= 0), -- Enforce non-negative outbound quantity.
    ClosingQuantity INT NOT NULL CHECK (ClosingQuantity >= 0), -- Enforce non-negative closing quantity.
    FOREIGN KEY (StockID) REFERENCES Stock_Master(StockID) ON DELETE CASCADE, -- Cascade deletes to maintain referential integrity.
    UNIQUE (StockID, Date) -- Ensures only one summary per stock per day.
);


-- 1. Insert Stock Transaction:
INSERT INTO Stock_Transactions (StockID, TransactionDate, TransactionType, Quantity, Remarks)
VALUES (1, '2025-01-06', 'I', 50, 'Restock shipment');

-- 2. Calculate Daily Summary:
SELECT 
    sm.StockID,
    sm.StockName,
    COALESCE(
        (SELECT ClosingQuantity 
         FROM Daily_Stock_Summary 
         WHERE StockID = sm.StockID AND Date = DATE_SUB('2025-01-06', INTERVAL 1 DAY)), 
        sm.InitialStock
    ) AS OpeningQuantity,
    COALESCE(SUM(CASE WHEN st.TransactionType = 'I' THEN st.Quantity ELSE 0 END), 0) AS InboundQuantity,
    COALESCE(SUM(CASE WHEN st.TransactionType = 'O' THEN st.Quantity ELSE 0 END), 0) AS OutboundQuantity,
    (COALESCE(
        (SELECT ClosingQuantity 
         FROM Daily_Stock_Summary 
         WHERE StockID = sm.StockID AND Date = DATE_SUB('2025-01-06', INTERVAL 1 DAY)), 
        sm.InitialStock
    ) 
    + COALESCE(SUM(CASE WHEN st.TransactionType = 'I' THEN st.Quantity ELSE 0 END), 0)
    - COALESCE(SUM(CASE WHEN st.TransactionType = 'O' THEN st.Quantity ELSE 0 END), 0)) AS ClosingQuantity
FROM Stock_Master sm
LEFT JOIN Stock_Transactions st ON sm.StockID = st.StockID AND st.TransactionDate = '2025-01-06'
GROUP BY sm.StockID, sm.StockName;

-- 3. Insert Daily Summary:
INSERT INTO Daily_Stock_Summary (StockID, Date, OpeningQuantity, InboundQuantity, OutboundQuantity, ClosingQuantity)
SELECT 
    sm.StockID,
    '2025-01-06' AS Date,
    COALESCE(
        (SELECT ClosingQuantity 
         FROM Daily_Stock_Summary 
         WHERE StockID = sm.StockID AND Date = DATE_SUB('2025-01-06', INTERVAL 1 DAY)), 
        sm.InitialStock
    ) AS OpeningQuantity,
    COALESCE(SUM(CASE WHEN st.TransactionType = 'I' THEN st.Quantity ELSE 0 END), 0) AS InboundQuantity,
    COALESCE(SUM(CASE WHEN st.TransactionType = 'O' THEN st.Quantity ELSE 0 END), 0) AS OutboundQuantity,
    (COALESCE(
        (SELECT ClosingQuantity 
         FROM Daily_Stock_Summary 
         WHERE StockID = sm.StockID AND Date = DATE_SUB('2025-01-06', INTERVAL 1 DAY)), 
        sm.InitialStock
    ) 
    + COALESCE(SUM(CASE WHEN st.TransactionType = 'I' THEN st.Quantity ELSE 0 END), 0)
    - COALESCE(SUM(CASE WHEN st.TransactionType = 'O' THEN st.Quantity ELSE 0 END), 0)) AS ClosingQuantity
FROM Stock_Master sm
LEFT JOIN Stock_Transactions st ON sm.StockID = st.StockID AND st.TransactionDate = '2025-01-06'
GROUP BY sm.StockID;
